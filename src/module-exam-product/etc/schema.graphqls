type Query {
    getProductRio(
        search: String
        filter: ProductFilterInput
        sort: ProductSortInput
        pageSize: Int = 5
        currentPage: Int = 1
    ): ProductList
    @resolver(class: "\\Exam\\Product\\Model\\Resolver\\GetProduct")
}

type ProductList {
    items: [Product]
    page_info: PageInfo
    total_count: Int
}

type Product {
    entity_id: Int
    sku: String
    name: String
    price: String
    status: Int
    description: String
    short_description: String
    weight: Float
    dimension_package_height: String
    dimension_package_length: String
    dimension_package_width: String
}

type PageInfo {
    current_page: Int
    page_size: Int
    total_pages: Int
}

input ProductFilterInput {
    entity_id: FilterRangeTypeInput
    sku: FilterTypeInput
    name: FilterTypeInput
    price: FilterTypeInput
    status: FilterTypeInput
}

input ProductSortInput {
    entity_id: SortEnum
    sku: SortEnum
    name: SortEnum
    price: SortEnum
    status: SortEnum
}